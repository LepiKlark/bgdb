// Signature file for parser generated by fsyacc
module CreateTableParser
type token = 
  | EOF
  | TABLE
  | CREATE
  | COMMA
  | ID of (string)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TABLE
    | TOKEN_CREATE
    | TOKEN_COMMA
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstartCT
    | NONTERM_startCT
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val startCT : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Sql.createTableStatement) 
