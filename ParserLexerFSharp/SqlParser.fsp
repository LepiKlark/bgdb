%{   
open Sql   
%}   
 
%token <string> ID   
%token <int> INT   
%token <float> FLOAT   
 
%token AND OR   
%token COMMA   
%token EQ LT LE GT GE   
%token JOIN INNER LEFT RIGHT ON   
%token SELECT FROM WHERE ORDER BY   
%token CREATE_TABLE
%token ASC DESC   
%token CREATE
%token DROP
%token TABLE
%token OBRCK
%token CBRCK
%token INSERT
%token INTO
%token VALUES
%token TYPE_INT TYPE_DOUBLE TYPE_STRING
%token EOF

%start startCT
%type <Sql.DmlDdlSqlStatement> startCT

%%

startCT: StatementType
EOF { $1 }

StatementType:
    | CREATE CreateStatement { Create($2) }
    | DROP DropStatement { Drop($2) }
    | SELECT SelectStatement { Select($2) }
    | INSERT InsertStatement { Insert($2)}

InsertStatement:
    INTO ID VALUES OBRCK valueList CBRCK 
    EOF { 
        { 
            Table = $2;
            Values = List.rev $5;
        }
    }

valueList:   
    | value { [$1]}
    | valueList COMMA value { $3 :: $1 }

CreateStatement:
    TABLE ID OBRCK columnTypeList CBRCK
    EOF {
        {
            Table = $2;
            ColumnList = List.rev $4
        } 
    }

DropStatement:
    | TABLE ID { $2 }

columnTypeList:
    | columnType                    { [$1] }
    | columnTypeList COMMA columnType { $3 :: $1 }

columnType:
    | TYPE_INT ID { IntCType, 0, $2 }
    | TYPE_DOUBLE ID { DoubleCType, 0, $2 }
    | TYPE_STRING OBRCK INT CBRCK ID { StringCType, $3, $5 }


// Select statement
SelectStatement:  columnList
        FROM ID
        joinList
        whereClause
        orderByClause
        EOF                 {
                                { Table = $3;
                                  Columns = List.rev $1;
                                  Joins = $4;
                                  Where = $5;
                                  OrderBy = $6 }
                            }
columnList:
    | ID                    { [$1]}
    | columnList COMMA ID  { $3 :: $1 }

// join clause
joinList:   
    |                               { [] }
    | joinClause                    { [$1] }
    | joinClause joinList           { $1 :: $2 }
 
joinClause:
    | INNER JOIN ID joinOnClause    { $3, Inner, $4 }
    | LEFT JOIN ID joinOnClause     { $3, Left, $4 }
    | RIGHT JOIN ID joinOnClause    { $3, Right, $4 }
 
joinOnClause:   
    |                               { None }
    | ON conditionList              { Some($2) }
 
conditionList:
    | value op value                    { Cond($1, $2, $3) }
    | value op value AND conditionList  { And(Cond($1, $2, $3), $5) }
    | value op value OR conditionList   { Or(Cond($1, $2, $3), $5) }
 
// where clause   
whereClause:
    |                               { None }
    | WHERE conditionList           { Some($2) }

op: EQ { Eq } | LT { Lt } | LE { Le } | GT { Gt } | GE { Ge }
 
value:   
    | INT                   { Int($1) }   
    | FLOAT                 { Float($1) }   
    | ID                    { String($1) }   
 
// order by clause   
 
orderByClause:   
    |                               { [] }   
    | ORDER BY orderByList          { $3 }   
 
orderByList:   
    | orderBy                       { [$1] }   
    | orderBy COMMA orderByList     { $1 :: $3 }   
 
orderBy:   
    | ID                            { $1, Asc }   
    | ID ASC                        { $1, Asc }   
    | ID DESC                       { $1, Desc}   

%%
