// Implementation file for parser generated by fsyacc
module SqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "SqlParser.fsp"

open Sql   

# 10 "SqlParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | CLUSTERED_INDEX
  | TOP
  | FILESYSTEM
  | VIDEO_CHUNKER
  | VIDEO_TO_IMAGE
  | STAR
  | QUOT
  | EOF
  | TYPE_INT
  | TYPE_DOUBLE
  | TYPE_STRING
  | VALUES
  | INTO
  | INSERT
  | CBRCK
  | OBRCK
  | TABLE
  | DROP
  | CREATE
  | ASC
  | DESC
  | CREATE_TABLE
  | MAX
  | MIN
  | COUNT
  | SUM
  | SELECT
  | FROM
  | WHERE
  | ORDER
  | BY
  | GROUP
  | JOIN
  | INNER
  | LEFT
  | RIGHT
  | ON
  | EQ
  | LT
  | LE
  | GT
  | GE
  | COMMA
  | AND
  | OR
  | STRING of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_CLUSTERED_INDEX
    | TOKEN_TOP
    | TOKEN_FILESYSTEM
    | TOKEN_VIDEO_CHUNKER
    | TOKEN_VIDEO_TO_IMAGE
    | TOKEN_STAR
    | TOKEN_QUOT
    | TOKEN_EOF
    | TOKEN_TYPE_INT
    | TOKEN_TYPE_DOUBLE
    | TOKEN_TYPE_STRING
    | TOKEN_VALUES
    | TOKEN_INTO
    | TOKEN_INSERT
    | TOKEN_CBRCK
    | TOKEN_OBRCK
    | TOKEN_TABLE
    | TOKEN_DROP
    | TOKEN_CREATE
    | TOKEN_ASC
    | TOKEN_DESC
    | TOKEN_CREATE_TABLE
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_COUNT
    | TOKEN_SUM
    | TOKEN_SELECT
    | TOKEN_FROM
    | TOKEN_WHERE
    | TOKEN_ORDER
    | TOKEN_BY
    | TOKEN_GROUP
    | TOKEN_JOIN
    | TOKEN_INNER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_ON
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_COMMA
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstartCT
    | NONTERM_startCT
    | NONTERM_StatementType
    | NONTERM_InsertStatement
    | NONTERM_valueList
    | NONTERM_CreateStatement
    | NONTERM_indexClause
    | NONTERM_indexColumnList
    | NONTERM_DropStatement
    | NONTERM_columnTypeList
    | NONTERM_columnType
    | NONTERM_SelectStatement
    | NONTERM_fromStatement
    | NONTERM_topClause
    | NONTERM_columnSelect
    | NONTERM_columnList
    | NONTERM_aggregate
    | NONTERM_joinList
    | NONTERM_joinClause
    | NONTERM_joinOnClause
    | NONTERM_conditionList
    | NONTERM_whereClause
    | NONTERM_op
    | NONTERM_value
    | NONTERM_groupByClause
    | NONTERM_groupByList
    | NONTERM_orderByClause
    | NONTERM_orderByList
    | NONTERM_orderBy
    | NONTERM_funcCall

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | CLUSTERED_INDEX  -> 0 
  | TOP  -> 1 
  | FILESYSTEM  -> 2 
  | VIDEO_CHUNKER  -> 3 
  | VIDEO_TO_IMAGE  -> 4 
  | STAR  -> 5 
  | QUOT  -> 6 
  | EOF  -> 7 
  | TYPE_INT  -> 8 
  | TYPE_DOUBLE  -> 9 
  | TYPE_STRING  -> 10 
  | VALUES  -> 11 
  | INTO  -> 12 
  | INSERT  -> 13 
  | CBRCK  -> 14 
  | OBRCK  -> 15 
  | TABLE  -> 16 
  | DROP  -> 17 
  | CREATE  -> 18 
  | ASC  -> 19 
  | DESC  -> 20 
  | CREATE_TABLE  -> 21 
  | MAX  -> 22 
  | MIN  -> 23 
  | COUNT  -> 24 
  | SUM  -> 25 
  | SELECT  -> 26 
  | FROM  -> 27 
  | WHERE  -> 28 
  | ORDER  -> 29 
  | BY  -> 30 
  | GROUP  -> 31 
  | JOIN  -> 32 
  | INNER  -> 33 
  | LEFT  -> 34 
  | RIGHT  -> 35 
  | ON  -> 36 
  | EQ  -> 37 
  | LT  -> 38 
  | LE  -> 39 
  | GT  -> 40 
  | GE  -> 41 
  | COMMA  -> 42 
  | AND  -> 43 
  | OR  -> 44 
  | STRING _ -> 45 
  | FLOAT _ -> 46 
  | INT _ -> 47 
  | ID _ -> 48 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_CLUSTERED_INDEX 
  | 1 -> TOKEN_TOP 
  | 2 -> TOKEN_FILESYSTEM 
  | 3 -> TOKEN_VIDEO_CHUNKER 
  | 4 -> TOKEN_VIDEO_TO_IMAGE 
  | 5 -> TOKEN_STAR 
  | 6 -> TOKEN_QUOT 
  | 7 -> TOKEN_EOF 
  | 8 -> TOKEN_TYPE_INT 
  | 9 -> TOKEN_TYPE_DOUBLE 
  | 10 -> TOKEN_TYPE_STRING 
  | 11 -> TOKEN_VALUES 
  | 12 -> TOKEN_INTO 
  | 13 -> TOKEN_INSERT 
  | 14 -> TOKEN_CBRCK 
  | 15 -> TOKEN_OBRCK 
  | 16 -> TOKEN_TABLE 
  | 17 -> TOKEN_DROP 
  | 18 -> TOKEN_CREATE 
  | 19 -> TOKEN_ASC 
  | 20 -> TOKEN_DESC 
  | 21 -> TOKEN_CREATE_TABLE 
  | 22 -> TOKEN_MAX 
  | 23 -> TOKEN_MIN 
  | 24 -> TOKEN_COUNT 
  | 25 -> TOKEN_SUM 
  | 26 -> TOKEN_SELECT 
  | 27 -> TOKEN_FROM 
  | 28 -> TOKEN_WHERE 
  | 29 -> TOKEN_ORDER 
  | 30 -> TOKEN_BY 
  | 31 -> TOKEN_GROUP 
  | 32 -> TOKEN_JOIN 
  | 33 -> TOKEN_INNER 
  | 34 -> TOKEN_LEFT 
  | 35 -> TOKEN_RIGHT 
  | 36 -> TOKEN_ON 
  | 37 -> TOKEN_EQ 
  | 38 -> TOKEN_LT 
  | 39 -> TOKEN_LE 
  | 40 -> TOKEN_GT 
  | 41 -> TOKEN_GE 
  | 42 -> TOKEN_COMMA 
  | 43 -> TOKEN_AND 
  | 44 -> TOKEN_OR 
  | 45 -> TOKEN_STRING 
  | 46 -> TOKEN_FLOAT 
  | 47 -> TOKEN_INT 
  | 48 -> TOKEN_ID 
  | 51 -> TOKEN_end_of_input
  | 49 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstartCT 
    | 1 -> NONTERM_startCT 
    | 2 -> NONTERM_StatementType 
    | 3 -> NONTERM_StatementType 
    | 4 -> NONTERM_StatementType 
    | 5 -> NONTERM_StatementType 
    | 6 -> NONTERM_InsertStatement 
    | 7 -> NONTERM_valueList 
    | 8 -> NONTERM_valueList 
    | 9 -> NONTERM_CreateStatement 
    | 10 -> NONTERM_indexClause 
    | 11 -> NONTERM_indexClause 
    | 12 -> NONTERM_indexColumnList 
    | 13 -> NONTERM_indexColumnList 
    | 14 -> NONTERM_DropStatement 
    | 15 -> NONTERM_columnTypeList 
    | 16 -> NONTERM_columnTypeList 
    | 17 -> NONTERM_columnType 
    | 18 -> NONTERM_columnType 
    | 19 -> NONTERM_columnType 
    | 20 -> NONTERM_SelectStatement 
    | 21 -> NONTERM_fromStatement 
    | 22 -> NONTERM_fromStatement 
    | 23 -> NONTERM_fromStatement 
    | 24 -> NONTERM_fromStatement 
    | 25 -> NONTERM_fromStatement 
    | 26 -> NONTERM_topClause 
    | 27 -> NONTERM_topClause 
    | 28 -> NONTERM_columnSelect 
    | 29 -> NONTERM_columnSelect 
    | 30 -> NONTERM_columnList 
    | 31 -> NONTERM_columnList 
    | 32 -> NONTERM_columnList 
    | 33 -> NONTERM_columnList 
    | 34 -> NONTERM_columnList 
    | 35 -> NONTERM_columnList 
    | 36 -> NONTERM_aggregate 
    | 37 -> NONTERM_aggregate 
    | 38 -> NONTERM_aggregate 
    | 39 -> NONTERM_aggregate 
    | 40 -> NONTERM_joinList 
    | 41 -> NONTERM_joinList 
    | 42 -> NONTERM_joinList 
    | 43 -> NONTERM_joinClause 
    | 44 -> NONTERM_joinClause 
    | 45 -> NONTERM_joinClause 
    | 46 -> NONTERM_joinClause 
    | 47 -> NONTERM_joinOnClause 
    | 48 -> NONTERM_joinOnClause 
    | 49 -> NONTERM_conditionList 
    | 50 -> NONTERM_conditionList 
    | 51 -> NONTERM_conditionList 
    | 52 -> NONTERM_conditionList 
    | 53 -> NONTERM_conditionList 
    | 54 -> NONTERM_conditionList 
    | 55 -> NONTERM_conditionList 
    | 56 -> NONTERM_whereClause 
    | 57 -> NONTERM_whereClause 
    | 58 -> NONTERM_op 
    | 59 -> NONTERM_op 
    | 60 -> NONTERM_op 
    | 61 -> NONTERM_op 
    | 62 -> NONTERM_op 
    | 63 -> NONTERM_value 
    | 64 -> NONTERM_value 
    | 65 -> NONTERM_value 
    | 66 -> NONTERM_value 
    | 67 -> NONTERM_value 
    | 68 -> NONTERM_value 
    | 69 -> NONTERM_groupByClause 
    | 70 -> NONTERM_groupByClause 
    | 71 -> NONTERM_groupByList 
    | 72 -> NONTERM_groupByList 
    | 73 -> NONTERM_orderByClause 
    | 74 -> NONTERM_orderByClause 
    | 75 -> NONTERM_orderByList 
    | 76 -> NONTERM_orderByList 
    | 77 -> NONTERM_orderBy 
    | 78 -> NONTERM_orderBy 
    | 79 -> NONTERM_orderBy 
    | 80 -> NONTERM_funcCall 
    | 81 -> NONTERM_funcCall 
    | 82 -> NONTERM_funcCall 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 51 
let _fsyacc_tagOfErrorTerminal = 49

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | CLUSTERED_INDEX  -> "CLUSTERED_INDEX" 
  | TOP  -> "TOP" 
  | FILESYSTEM  -> "FILESYSTEM" 
  | VIDEO_CHUNKER  -> "VIDEO_CHUNKER" 
  | VIDEO_TO_IMAGE  -> "VIDEO_TO_IMAGE" 
  | STAR  -> "STAR" 
  | QUOT  -> "QUOT" 
  | EOF  -> "EOF" 
  | TYPE_INT  -> "TYPE_INT" 
  | TYPE_DOUBLE  -> "TYPE_DOUBLE" 
  | TYPE_STRING  -> "TYPE_STRING" 
  | VALUES  -> "VALUES" 
  | INTO  -> "INTO" 
  | INSERT  -> "INSERT" 
  | CBRCK  -> "CBRCK" 
  | OBRCK  -> "OBRCK" 
  | TABLE  -> "TABLE" 
  | DROP  -> "DROP" 
  | CREATE  -> "CREATE" 
  | ASC  -> "ASC" 
  | DESC  -> "DESC" 
  | CREATE_TABLE  -> "CREATE_TABLE" 
  | MAX  -> "MAX" 
  | MIN  -> "MIN" 
  | COUNT  -> "COUNT" 
  | SUM  -> "SUM" 
  | SELECT  -> "SELECT" 
  | FROM  -> "FROM" 
  | WHERE  -> "WHERE" 
  | ORDER  -> "ORDER" 
  | BY  -> "BY" 
  | GROUP  -> "GROUP" 
  | JOIN  -> "JOIN" 
  | INNER  -> "INNER" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | ON  -> "ON" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | COMMA  -> "COMMA" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | CLUSTERED_INDEX  -> (null : System.Object) 
  | TOP  -> (null : System.Object) 
  | FILESYSTEM  -> (null : System.Object) 
  | VIDEO_CHUNKER  -> (null : System.Object) 
  | VIDEO_TO_IMAGE  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | TYPE_INT  -> (null : System.Object) 
  | TYPE_DOUBLE  -> (null : System.Object) 
  | TYPE_STRING  -> (null : System.Object) 
  | VALUES  -> (null : System.Object) 
  | INTO  -> (null : System.Object) 
  | INSERT  -> (null : System.Object) 
  | CBRCK  -> (null : System.Object) 
  | OBRCK  -> (null : System.Object) 
  | TABLE  -> (null : System.Object) 
  | DROP  -> (null : System.Object) 
  | CREATE  -> (null : System.Object) 
  | ASC  -> (null : System.Object) 
  | DESC  -> (null : System.Object) 
  | CREATE_TABLE  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | COUNT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | GROUP  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | INNER  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 10us; 11us; 1us; 65535us; 15us; 16us; 1us; 65535us; 4us; 5us; 1us; 65535us; 26us; 27us; 1us; 65535us; 30us; 31us; 1us; 65535us; 6us; 7us; 1us; 65535us; 24us; 25us; 2us; 65535us; 24us; 38us; 39us; 40us; 4us; 65535us; 8us; 9us; 60us; 61us; 71us; 72us; 80us; 81us; 1us; 65535us; 51us; 52us; 4us; 65535us; 8us; 50us; 60us; 50us; 71us; 50us; 80us; 50us; 1us; 65535us; 50us; 51us; 1us; 65535us; 50us; 86us; 2us; 65535us; 50us; 90us; 88us; 91us; 2us; 65535us; 52us; 53us; 110us; 111us; 2us; 65535us; 52us; 110us; 110us; 110us; 4us; 65535us; 114us; 115us; 118us; 119us; 122us; 123us; 125us; 126us; 6us; 65535us; 127us; 128us; 132us; 133us; 134us; 135us; 140us; 141us; 142us; 143us; 144us; 145us; 1us; 65535us; 53us; 54us; 2us; 65535us; 129us; 130us; 137us; 138us; 16us; 65535us; 15us; 19us; 20us; 21us; 50us; 87us; 64us; 65us; 88us; 89us; 127us; 129us; 130us; 131us; 132us; 129us; 134us; 129us; 138us; 139us; 140us; 129us; 142us; 129us; 144us; 129us; 177us; 178us; 180us; 181us; 183us; 184us; 1us; 65535us; 54us; 55us; 2us; 65535us; 163us; 164us; 166us; 167us; 1us; 65535us; 55us; 56us; 2us; 65535us; 169us; 170us; 172us; 173us; 2us; 65535us; 169us; 171us; 172us; 171us; 9us; 65535us; 50us; 92us; 88us; 93us; 127us; 137us; 130us; 136us; 132us; 137us; 134us; 137us; 140us; 137us; 142us; 137us; 144us; 137us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 13us; 15us; 17us; 19us; 22us; 27us; 29us; 34us; 36us; 38us; 41us; 44us; 47us; 52us; 59us; 61us; 64us; 81us; 83us; 86us; 88us; 91us; 94us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 2us; 9us; 16us; 1us; 9us; 1us; 9us; 1us; 9us; 1us; 11us; 1us; 11us; 2us; 11us; 13us; 1us; 11us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 19us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 1us; 20us; 5us; 21us; 22us; 23us; 24us; 25us; 1us; 21us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 28us; 4us; 29us; 31us; 33us; 35us; 1us; 30us; 3us; 31us; 33us; 35us; 1us; 31us; 1us; 32us; 1us; 33us; 1us; 34us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 39us; 2us; 41us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 45us; 1us; 46us; 1us; 46us; 1us; 46us; 1us; 48us; 1us; 48us; 5us; 49us; 50us; 51us; 52us; 54us; 5us; 49us; 50us; 51us; 52us; 54us; 3us; 49us; 50us; 51us; 1us; 50us; 1us; 50us; 1us; 51us; 1us; 51us; 2us; 52us; 54us; 2us; 53us; 55us; 2us; 53us; 55us; 2us; 53us; 55us; 1us; 54us; 1us; 54us; 1us; 55us; 1us; 55us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 3us; 65us; 66us; 67us; 1us; 65us; 1us; 65us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 67us; 1us; 68us; 4us; 68us; 80us; 81us; 82us; 1us; 70us; 1us; 70us; 1us; 70us; 2us; 71us; 72us; 1us; 72us; 1us; 72us; 1us; 74us; 1us; 74us; 1us; 74us; 2us; 75us; 76us; 1us; 76us; 1us; 76us; 3us; 77us; 78us; 79us; 1us; 78us; 1us; 79us; 3us; 80us; 81us; 82us; 3us; 80us; 81us; 82us; 1us; 80us; 2us; 81us; 82us; 2us; 81us; 82us; 1us; 81us; 1us; 82us; 1us; 82us; 1us; 82us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 60us; 62us; 64us; 67us; 69us; 71us; 73us; 75us; 77us; 79us; 81us; 83us; 85us; 87us; 89us; 91us; 93us; 95us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 159us; 161us; 163us; 165us; 167us; 169us; 171us; 173us; 175us; 177us; 179us; 184us; 186us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 235us; 237us; 239us; 241us; 243us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 277us; 283us; 287us; 289us; 291us; 293us; 295us; 298us; 301us; 304us; 307us; 309us; 311us; 313us; 315us; 317us; 319us; 321us; 323us; 325us; 327us; 329us; 331us; 333us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 356us; 358us; 360us; 362us; 365us; 367us; 369us; 371us; 373us; 375us; 378us; 380us; 382us; 386us; 388us; 390us; 394us; 398us; 400us; 403us; 406us; 408us; 410us; 412us; |]
let _fsyacc_action_rows = 186
let _fsyacc_actionTableElements = [|4us; 32768us; 13us; 10us; 17us; 6us; 18us; 4us; 26us; 8us; 0us; 49152us; 1us; 32768us; 7us; 3us; 0us; 16385us; 1us; 32768us; 16us; 22us; 0us; 16386us; 1us; 32768us; 16us; 36us; 0us; 16387us; 1us; 16411us; 1us; 83us; 0us; 16388us; 1us; 32768us; 12us; 12us; 0us; 16389us; 1us; 32768us; 48us; 13us; 1us; 32768us; 11us; 14us; 1us; 32768us; 15us; 15us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 2us; 32768us; 14us; 17us; 42us; 20us; 1us; 32768us; 7us; 18us; 0us; 16390us; 0us; 16391us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 0us; 16392us; 1us; 32768us; 48us; 23us; 1us; 32768us; 15us; 24us; 3us; 32768us; 8us; 41us; 9us; 43us; 10us; 45us; 2us; 32768us; 14us; 26us; 42us; 39us; 1us; 16394us; 0us; 29us; 1us; 32768us; 7us; 28us; 0us; 16393us; 1us; 32768us; 15us; 30us; 1us; 32768us; 48us; 33us; 2us; 32768us; 14us; 32us; 42us; 34us; 0us; 16395us; 0us; 16396us; 1us; 32768us; 48us; 35us; 0us; 16397us; 1us; 32768us; 48us; 37us; 0us; 16398us; 0us; 16399us; 3us; 32768us; 8us; 41us; 9us; 43us; 10us; 45us; 0us; 16400us; 1us; 32768us; 48us; 42us; 0us; 16401us; 1us; 32768us; 48us; 44us; 0us; 16402us; 1us; 32768us; 15us; 46us; 1us; 32768us; 47us; 47us; 1us; 32768us; 14us; 48us; 1us; 32768us; 48us; 49us; 0us; 16403us; 9us; 32768us; 5us; 85us; 6us; 153us; 22us; 94us; 23us; 98us; 24us; 102us; 25us; 106us; 46us; 152us; 47us; 151us; 48us; 161us; 1us; 32768us; 27us; 57us; 4us; 16424us; 32us; 124us; 33us; 112us; 34us; 116us; 35us; 120us; 1us; 16440us; 28us; 144us; 1us; 16453us; 31us; 162us; 1us; 16457us; 29us; 168us; 0us; 16404us; 5us; 32768us; 2us; 63us; 3us; 67us; 4us; 74us; 15us; 59us; 48us; 58us; 0us; 16405us; 1us; 32768us; 26us; 60us; 1us; 16411us; 1us; 83us; 1us; 32768us; 14us; 62us; 0us; 16406us; 1us; 32768us; 15us; 64us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 1us; 32768us; 14us; 66us; 0us; 16407us; 1us; 32768us; 15us; 68us; 1us; 32768us; 47us; 69us; 1us; 32768us; 42us; 70us; 1us; 32768us; 26us; 71us; 1us; 16411us; 1us; 83us; 1us; 32768us; 14us; 73us; 0us; 16408us; 1us; 32768us; 15us; 75us; 1us; 32768us; 47us; 76us; 1us; 32768us; 42us; 77us; 1us; 32768us; 47us; 78us; 1us; 32768us; 42us; 79us; 1us; 32768us; 26us; 80us; 1us; 16411us; 1us; 83us; 1us; 32768us; 14us; 82us; 0us; 16409us; 1us; 32768us; 47us; 84us; 0us; 16410us; 0us; 16412us; 1us; 16413us; 42us; 88us; 0us; 16414us; 8us; 32768us; 6us; 153us; 22us; 94us; 23us; 98us; 24us; 102us; 25us; 106us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16415us; 0us; 16416us; 0us; 16417us; 0us; 16418us; 0us; 16419us; 1us; 32768us; 15us; 95us; 1us; 32768us; 48us; 96us; 1us; 32768us; 14us; 97us; 0us; 16420us; 1us; 32768us; 15us; 99us; 1us; 32768us; 48us; 100us; 1us; 32768us; 14us; 101us; 0us; 16421us; 1us; 32768us; 15us; 103us; 1us; 32768us; 48us; 104us; 1us; 32768us; 14us; 105us; 0us; 16422us; 1us; 32768us; 15us; 107us; 1us; 32768us; 48us; 108us; 1us; 32768us; 14us; 109us; 0us; 16423us; 4us; 16424us; 32us; 124us; 33us; 112us; 34us; 116us; 35us; 120us; 0us; 16426us; 1us; 32768us; 32us; 113us; 1us; 32768us; 48us; 114us; 1us; 16431us; 36us; 127us; 0us; 16427us; 1us; 32768us; 32us; 117us; 1us; 32768us; 48us; 118us; 1us; 16431us; 36us; 127us; 0us; 16428us; 1us; 32768us; 32us; 121us; 1us; 32768us; 48us; 122us; 1us; 16431us; 36us; 127us; 0us; 16429us; 1us; 32768us; 48us; 125us; 1us; 16431us; 36us; 127us; 0us; 16430us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16432us; 5us; 32768us; 37us; 146us; 38us; 147us; 39us; 148us; 40us; 149us; 41us; 150us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 2us; 16433us; 43us; 132us; 44us; 134us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16434us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16435us; 1us; 16436us; 43us; 140us; 5us; 32768us; 37us; 146us; 38us; 147us; 39us; 148us; 40us; 149us; 41us; 150us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 1us; 16437us; 44us; 142us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16438us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16439us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 161us; 0us; 16441us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 3us; 32768us; 46us; 156us; 47us; 158us; 48us; 154us; 1us; 32768us; 6us; 155us; 0us; 16449us; 1us; 32768us; 6us; 157us; 0us; 16450us; 1us; 32768us; 6us; 159us; 0us; 16451us; 0us; 16452us; 1us; 16452us; 15us; 177us; 1us; 32768us; 30us; 163us; 1us; 32768us; 48us; 165us; 0us; 16454us; 1us; 16455us; 42us; 166us; 1us; 32768us; 48us; 165us; 0us; 16456us; 1us; 32768us; 30us; 169us; 1us; 32768us; 48us; 174us; 0us; 16458us; 1us; 16459us; 42us; 172us; 1us; 32768us; 48us; 174us; 0us; 16460us; 2us; 16461us; 19us; 175us; 20us; 176us; 0us; 16462us; 0us; 16463us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 2us; 32768us; 14us; 179us; 42us; 180us; 0us; 16464us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 2us; 32768us; 14us; 182us; 42us; 183us; 0us; 16465us; 4us; 32768us; 6us; 153us; 46us; 152us; 47us; 151us; 48us; 160us; 1us; 32768us; 14us; 185us; 0us; 16466us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 11us; 12us; 14us; 15us; 17us; 18us; 20us; 21us; 23us; 25us; 27us; 32us; 35us; 37us; 38us; 39us; 44us; 45us; 47us; 49us; 53us; 56us; 58us; 60us; 61us; 63us; 65us; 68us; 69us; 70us; 72us; 73us; 75us; 76us; 77us; 81us; 82us; 84us; 85us; 87us; 88us; 90us; 92us; 94us; 96us; 97us; 107us; 109us; 114us; 116us; 118us; 120us; 121us; 127us; 128us; 130us; 132us; 134us; 135us; 137us; 142us; 144us; 145us; 147us; 149us; 151us; 153us; 155us; 157us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 175us; 177us; 178us; 179us; 181us; 182us; 191us; 192us; 193us; 194us; 195us; 196us; 198us; 200us; 202us; 203us; 205us; 207us; 209us; 210us; 212us; 214us; 216us; 217us; 219us; 221us; 223us; 224us; 229us; 230us; 232us; 234us; 236us; 237us; 239us; 241us; 243us; 244us; 246us; 248us; 250us; 251us; 253us; 255us; 256us; 261us; 262us; 268us; 273us; 276us; 281us; 282us; 287us; 288us; 290us; 296us; 301us; 303us; 308us; 309us; 314us; 315us; 320us; 321us; 322us; 323us; 324us; 325us; 326us; 327us; 328us; 332us; 334us; 335us; 337us; 338us; 340us; 341us; 342us; 344us; 346us; 348us; 349us; 351us; 353us; 354us; 356us; 358us; 359us; 361us; 363us; 364us; 367us; 368us; 369us; 374us; 377us; 378us; 383us; 386us; 387us; 392us; 394us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 2us; 2us; 2us; 7us; 1us; 3us; 7us; 0us; 4us; 1us; 3us; 2us; 1us; 3us; 2us; 2us; 5us; 7us; 2us; 5us; 5us; 8us; 10us; 2us; 0us; 1us; 1us; 1us; 3us; 1us; 3us; 1us; 3us; 4us; 4us; 4us; 4us; 0us; 1us; 2us; 4us; 4us; 4us; 3us; 0us; 2us; 3us; 5us; 5us; 3us; 3us; 5us; 5us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 1us; 0us; 3us; 1us; 3us; 0us; 3us; 1us; 3us; 1us; 2us; 2us; 4us; 6us; 8us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 7us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 11us; 12us; 12us; 12us; 12us; 12us; 13us; 13us; 14us; 14us; 15us; 15us; 15us; 15us; 15us; 15us; 16us; 16us; 16us; 16us; 17us; 17us; 17us; 18us; 18us; 18us; 18us; 19us; 19us; 20us; 20us; 20us; 20us; 20us; 20us; 20us; 21us; 21us; 22us; 22us; 22us; 22us; 22us; 23us; 23us; 23us; 23us; 23us; 23us; 24us; 24us; 25us; 25us; 26us; 26us; 27us; 27us; 28us; 28us; 28us; 29us; 29us; 29us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 16396us; 65535us; 16397us; 65535us; 16398us; 16399us; 65535us; 16400us; 65535us; 16401us; 65535us; 16402us; 65535us; 65535us; 65535us; 65535us; 16403us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 16405us; 65535us; 65535us; 65535us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 16410us; 16412us; 65535us; 16414us; 65535us; 16415us; 16416us; 16417us; 16418us; 16419us; 65535us; 65535us; 65535us; 16420us; 65535us; 65535us; 65535us; 16421us; 65535us; 65535us; 65535us; 16422us; 65535us; 65535us; 65535us; 16423us; 65535us; 16426us; 65535us; 65535us; 65535us; 16427us; 65535us; 65535us; 65535us; 16428us; 65535us; 65535us; 65535us; 16429us; 65535us; 65535us; 16430us; 65535us; 16432us; 65535us; 65535us; 65535us; 65535us; 16434us; 65535us; 16435us; 65535us; 65535us; 65535us; 65535us; 65535us; 16438us; 65535us; 16439us; 65535us; 16441us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 65535us; 65535us; 16449us; 65535us; 16450us; 65535us; 16451us; 16452us; 65535us; 65535us; 65535us; 16454us; 65535us; 65535us; 16456us; 65535us; 65535us; 16458us; 65535us; 65535us; 16460us; 65535us; 16462us; 16463us; 65535us; 65535us; 16464us; 65535us; 65535us; 16465us; 65535us; 65535us; 16466us; |]
let _fsyacc_reductions ()  =    [| 
# 464 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Sql.DmlDdlSqlStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstartCT));
# 473 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_StatementType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "SqlParser.fsp"
                           _1 
                   )
# 40 "SqlParser.fsp"
                 : Sql.DmlDdlSqlStatement));
# 484 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_CreateStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "SqlParser.fsp"
                                                    Create(_2) 
                   )
# 43 "SqlParser.fsp"
                 : 'gentype_StatementType));
# 495 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_DropStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "SqlParser.fsp"
                                                Drop(_2) 
                   )
# 44 "SqlParser.fsp"
                 : 'gentype_StatementType));
# 506 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_SelectStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "SqlParser.fsp"
                                                    Select(_2) 
                   )
# 45 "SqlParser.fsp"
                 : 'gentype_StatementType));
# 517 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_InsertStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "SqlParser.fsp"
                                                    Insert(_2)
                   )
# 46 "SqlParser.fsp"
                 : 'gentype_StatementType));
# 528 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_valueList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "SqlParser.fsp"
                               
                             { 
                                 Table = _2;
                                 Values = List.rev _5;
                             }
                         
                   )
# 50 "SqlParser.fsp"
                 : 'gentype_InsertStatement));
# 545 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "SqlParser.fsp"
                                   [_1]
                   )
# 58 "SqlParser.fsp"
                 : 'gentype_valueList));
# 556 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_valueList in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "SqlParser.fsp"
                                                   _3 :: _1 
                   )
# 59 "SqlParser.fsp"
                 : 'gentype_valueList));
# 568 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_columnTypeList in
            let _6 = parseState.GetInput(6) :?> 'gentype_indexClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "SqlParser.fsp"
                              
                             {
                                 Table = _2;
                                 ColumnList = List.rev _4
                                 ClusteredIndexList = _6
                                 // ClusteredIndexList = _6
                             } 
                         
                   )
# 63 "SqlParser.fsp"
                 : 'gentype_CreateStatement));
# 588 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "SqlParser.fsp"
                              [] 
                   )
# 73 "SqlParser.fsp"
                 : 'gentype_indexClause));
# 598 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_indexColumnList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "SqlParser.fsp"
                                                                          List.rev _3 
                   )
# 74 "SqlParser.fsp"
                 : 'gentype_indexClause));
# 609 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "SqlParser.fsp"
                                [_1] 
                   )
# 77 "SqlParser.fsp"
                 : 'gentype_indexColumnList));
# 620 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_indexColumnList in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "SqlParser.fsp"
                                                      _3 :: _1 
                   )
# 78 "SqlParser.fsp"
                 : 'gentype_indexColumnList));
# 632 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "SqlParser.fsp"
                                      _2 
                   )
# 81 "SqlParser.fsp"
                 : 'gentype_DropStatement));
# 643 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "SqlParser.fsp"
                                                           [_1] 
                   )
# 84 "SqlParser.fsp"
                 : 'gentype_columnTypeList));
# 654 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnTypeList in
            let _3 = parseState.GetInput(3) :?> 'gentype_columnType in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "SqlParser.fsp"
                                                             _3 :: _1 
                   )
# 85 "SqlParser.fsp"
                 : 'gentype_columnTypeList));
# 666 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "SqlParser.fsp"
                                         IntCType, 0, _2 
                   )
# 88 "SqlParser.fsp"
                 : 'gentype_columnType));
# 677 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "SqlParser.fsp"
                                            DoubleCType, 0, _2 
                   )
# 89 "SqlParser.fsp"
                 : 'gentype_columnType));
# 688 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> int in
            let _5 = parseState.GetInput(5) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "SqlParser.fsp"
                                                            StringCType, _3, _5 
                   )
# 90 "SqlParser.fsp"
                 : 'gentype_columnType));
# 700 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_topClause in
            let _2 = parseState.GetInput(2) :?> 'gentype_columnSelect in
            let _3 = parseState.GetInput(3) :?> 'gentype_fromStatement in
            let _4 = parseState.GetInput(4) :?> 'gentype_joinList in
            let _5 = parseState.GetInput(5) :?> 'gentype_whereClause in
            let _6 = parseState.GetInput(6) :?> 'gentype_groupByClause in
            let _7 = parseState.GetInput(7) :?> 'gentype_orderByClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "SqlParser.fsp"
                                                  
                                                     {
                                                       Top = _1
                                                       From = _3;
                                                       Columns = _2;
                                                       Joins = _4;
                                                       Where = _5;
                                                       GroupBy = _6;
                                                       OrderBy = _7
                                                     }
                                                 
                   )
# 98 "SqlParser.fsp"
                 : 'gentype_SelectStatement));
# 727 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "SqlParser.fsp"
                                     FromTable(_2) 
                   )
# 111 "SqlParser.fsp"
                 : 'gentype_fromStatement));
# 738 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> 'gentype_SelectStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "SqlParser.fsp"
                                                                     FromSubquery(_4) 
                   )
# 112 "SqlParser.fsp"
                 : 'gentype_fromStatement));
# 749 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "SqlParser.fsp"
                                                               FileSystemProvider(_4) 
                   )
# 113 "SqlParser.fsp"
                 : 'gentype_fromStatement));
# 760 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> int in
            let _7 = parseState.GetInput(7) :?> 'gentype_SelectStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "SqlParser.fsp"
                                                                                             VideoChunkProviderSubquery(_7, _4) 
                   )
# 114 "SqlParser.fsp"
                 : 'gentype_fromStatement));
# 772 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> int in
            let _9 = parseState.GetInput(9) :?> 'gentype_SelectStatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "SqlParser.fsp"
                                                                                                        VideoImageProviderSubquery(_9, _4, _6) 
                   )
# 115 "SqlParser.fsp"
                 : 'gentype_fromStatement));
# 785 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "SqlParser.fsp"
                                     Some(_2) 
                   )
# 118 "SqlParser.fsp"
                 : 'gentype_topClause));
# 796 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "SqlParser.fsp"
                                     None 
                   )
# 119 "SqlParser.fsp"
                 : 'gentype_topClause));
# 806 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "SqlParser.fsp"
                                  Star 
                   )
# 122 "SqlParser.fsp"
                 : 'gentype_columnSelect));
# 816 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "SqlParser.fsp"
                                        ColumnList(List.rev _1) 
                   )
# 123 "SqlParser.fsp"
                 : 'gentype_columnSelect));
# 827 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "SqlParser.fsp"
                                   [ValueOrFunc(Value(_1))] 
                   )
# 126 "SqlParser.fsp"
                 : 'gentype_columnList));
# 838 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnList in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "SqlParser.fsp"
                                                    ValueOrFunc(Value(_3)) :: _1 
                   )
# 127 "SqlParser.fsp"
                 : 'gentype_columnList));
# 850 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aggregate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "SqlParser.fsp"
                                                        [_1] 
                   )
# 128 "SqlParser.fsp"
                 : 'gentype_columnList));
# 861 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnList in
            let _3 = parseState.GetInput(3) :?> 'gentype_aggregate in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "SqlParser.fsp"
                                                        _3 :: _1 
                   )
# 129 "SqlParser.fsp"
                 : 'gentype_columnList));
# 873 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcCall in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "SqlParser.fsp"
                                                            [ValueOrFunc(FuncCall(_1))] 
                   )
# 130 "SqlParser.fsp"
                 : 'gentype_columnList));
# 884 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_columnList in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcCall in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "SqlParser.fsp"
                                                            ValueOrFunc(FuncCall(_3)) :: _1 
                   )
# 131 "SqlParser.fsp"
                 : 'gentype_columnList));
# 896 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "SqlParser.fsp"
                                                Aggregate(Max, _3) 
                   )
# 134 "SqlParser.fsp"
                 : 'gentype_aggregate));
# 907 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "SqlParser.fsp"
                                                Aggregate(Min, _3) 
                   )
# 135 "SqlParser.fsp"
                 : 'gentype_aggregate));
# 918 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                                                  Aggregate(Count, _3) 
                   )
# 136 "SqlParser.fsp"
                 : 'gentype_aggregate));
# 929 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "SqlParser.fsp"
                                                Aggregate(Sum, _3) 
                   )
# 137 "SqlParser.fsp"
                 : 'gentype_aggregate));
# 940 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "SqlParser.fsp"
                                                           [] 
                   )
# 141 "SqlParser.fsp"
                 : 'gentype_joinList));
# 950 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_joinClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "SqlParser.fsp"
                                                           [_1] 
                   )
# 142 "SqlParser.fsp"
                 : 'gentype_joinList));
# 961 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_joinClause in
            let _2 = parseState.GetInput(2) :?> 'gentype_joinList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "SqlParser.fsp"
                                                           _1 :: _2 
                   )
# 143 "SqlParser.fsp"
                 : 'gentype_joinList));
# 973 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_joinOnClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 146 "SqlParser.fsp"
                                                           _3, Inner, _4 
                   )
# 146 "SqlParser.fsp"
                 : 'gentype_joinClause));
# 985 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_joinOnClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 147 "SqlParser.fsp"
                                                           _3, Left, _4 
                   )
# 147 "SqlParser.fsp"
                 : 'gentype_joinClause));
# 997 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_joinOnClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "SqlParser.fsp"
                                                           _3, Right, _4 
                   )
# 148 "SqlParser.fsp"
                 : 'gentype_joinClause));
# 1009 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_joinOnClause in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "SqlParser.fsp"
                                                           _2, Inner, _3 
                   )
# 149 "SqlParser.fsp"
                 : 'gentype_joinClause));
# 1021 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "SqlParser.fsp"
                                                           None 
                   )
# 152 "SqlParser.fsp"
                 : 'gentype_joinOnClause));
# 1031 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "SqlParser.fsp"
                                                           Some(_2) 
                   )
# 153 "SqlParser.fsp"
                 : 'gentype_joinOnClause));
# 1042 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "SqlParser.fsp"
                                                               Cond(Value(_1), _2, Value(_3)) 
                   )
# 156 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1055 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "SqlParser.fsp"
                                                               And(Cond(Value(_1), _2, Value(_3)), _5) 
                   )
# 157 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1069 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "SqlParser.fsp"
                                                               Or(Cond(Value(_1), _2, Value(_3)), _5) 
                   )
# 158 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1083 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcCall in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "SqlParser.fsp"
                                                               Cond(Value(_1), _2, FuncCall(_3)) 
                   )
# 159 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1096 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcCall in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "SqlParser.fsp"
                                                               Cond(FuncCall(_1), _2, Value(_3)) 
                   )
# 160 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1109 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_value in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_funcCall in
            let _5 = parseState.GetInput(5) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "SqlParser.fsp"
                                                                                 And(Cond(Value(_1), _2, FuncCall(_3)), _5) 
                   )
# 161 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1123 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_funcCall in
            let _2 = parseState.GetInput(2) :?> 'gentype_op in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "SqlParser.fsp"
                                                                                 Or(Cond(FuncCall(_1), _2, Value(_3)), _5) 
                   )
# 162 "SqlParser.fsp"
                 : 'gentype_conditionList));
# 1137 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "SqlParser.fsp"
                                                           None 
                   )
# 166 "SqlParser.fsp"
                 : 'gentype_whereClause));
# 1147 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_conditionList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "SqlParser.fsp"
                                                           Some(_2) 
                   )
# 167 "SqlParser.fsp"
                 : 'gentype_whereClause));
# 1158 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "SqlParser.fsp"
                              Eq 
                   )
# 169 "SqlParser.fsp"
                 : 'gentype_op));
# 1168 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "SqlParser.fsp"
                                          Lt 
                   )
# 169 "SqlParser.fsp"
                 : 'gentype_op));
# 1178 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "SqlParser.fsp"
                                                      Le 
                   )
# 169 "SqlParser.fsp"
                 : 'gentype_op));
# 1188 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "SqlParser.fsp"
                                                                  Gt 
                   )
# 169 "SqlParser.fsp"
                 : 'gentype_op));
# 1198 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "SqlParser.fsp"
                                                                              Ge 
                   )
# 169 "SqlParser.fsp"
                 : 'gentype_op));
# 1208 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 172 "SqlParser.fsp"
                                                   Int(_1) 
                   )
# 172 "SqlParser.fsp"
                 : 'gentype_value));
# 1219 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "SqlParser.fsp"
                                                   Float(_1) 
                   )
# 173 "SqlParser.fsp"
                 : 'gentype_value));
# 1230 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "SqlParser.fsp"
                                                   String(_2) 
                   )
# 174 "SqlParser.fsp"
                 : 'gentype_value));
# 1241 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "SqlParser.fsp"
                                                      String(string _2) 
                   )
# 175 "SqlParser.fsp"
                 : 'gentype_value));
# 1252 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "SqlParser.fsp"
                                                    String(string _2) 
                   )
# 176 "SqlParser.fsp"
                 : 'gentype_value));
# 1263 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "SqlParser.fsp"
                                                   Id(_1) 
                   )
# 177 "SqlParser.fsp"
                 : 'gentype_value));
# 1274 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 181 "SqlParser.fsp"
                                                           [] 
                   )
# 181 "SqlParser.fsp"
                 : 'gentype_groupByClause));
# 1284 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_groupByList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "SqlParser.fsp"
                                                           _3 
                   )
# 182 "SqlParser.fsp"
                 : 'gentype_groupByClause));
# 1295 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 185 "SqlParser.fsp"
                                                           [_1] 
                   )
# 185 "SqlParser.fsp"
                 : 'gentype_groupByList));
# 1306 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_groupByList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 186 "SqlParser.fsp"
                                                           _1 :: _3 
                   )
# 186 "SqlParser.fsp"
                 : 'gentype_groupByList));
# 1318 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "SqlParser.fsp"
                                                           [] 
                   )
# 190 "SqlParser.fsp"
                 : 'gentype_orderByClause));
# 1328 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_orderByList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "SqlParser.fsp"
                                                           _3 
                   )
# 191 "SqlParser.fsp"
                 : 'gentype_orderByClause));
# 1339 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orderBy in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "SqlParser.fsp"
                                                           [_1] 
                   )
# 194 "SqlParser.fsp"
                 : 'gentype_orderByList));
# 1350 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_orderBy in
            let _3 = parseState.GetInput(3) :?> 'gentype_orderByList in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 195 "SqlParser.fsp"
                                                           _1 :: _3 
                   )
# 195 "SqlParser.fsp"
                 : 'gentype_orderByList));
# 1362 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "SqlParser.fsp"
                                                           _1, Asc 
                   )
# 198 "SqlParser.fsp"
                 : 'gentype_orderBy));
# 1373 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 199 "SqlParser.fsp"
                                                           _1, Asc 
                   )
# 199 "SqlParser.fsp"
                 : 'gentype_orderBy));
# 1384 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 200 "SqlParser.fsp"
                                                           _1, Desc
                   )
# 200 "SqlParser.fsp"
                 : 'gentype_orderBy));
# 1395 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "SqlParser.fsp"
                                                  (_1, Args1(_3)) 
                   )
# 203 "SqlParser.fsp"
                 : 'gentype_funcCall));
# 1407 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "SqlParser.fsp"
                                                              (_1, Args2(_3, _5)) 
                   )
# 204 "SqlParser.fsp"
                 : 'gentype_funcCall));
# 1420 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_value in
            let _5 = parseState.GetInput(5) :?> 'gentype_value in
            let _7 = parseState.GetInput(7) :?> 'gentype_value in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "SqlParser.fsp"
                                                                          (_1, Args3(_3, _5, _7)) 
                   )
# 205 "SqlParser.fsp"
                 : 'gentype_funcCall));
|]
# 1435 "SqlParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 52;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let startCT lexer lexbuf : Sql.DmlDdlSqlStatement =
    engine lexer lexbuf 0 :?> _
