// Implementation file for parser generated by fsyacc
module SqlParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "SqlParser.fsp"
   
open Sql   

# 10 "SqlParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | STAR
  | QUOT
  | EOF
  | TYPE_INT
  | TYPE_DOUBLE
  | TYPE_STRING
  | VALUES
  | INTO
  | INSERT
  | CBRCK
  | OBRCK
  | TABLE
  | DROP
  | CREATE
  | ASC
  | DESC
  | CREATE_TABLE
  | MAX
  | MIN
  | COUNT
  | SUM
  | SELECT
  | FROM
  | WHERE
  | ORDER
  | BY
  | GROUP
  | JOIN
  | INNER
  | LEFT
  | RIGHT
  | ON
  | EQ
  | LT
  | LE
  | GT
  | GE
  | COMMA
  | AND
  | OR
  | STRING of (string)
  | FLOAT of (float)
  | INT of (int)
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_STAR
    | TOKEN_QUOT
    | TOKEN_EOF
    | TOKEN_TYPE_INT
    | TOKEN_TYPE_DOUBLE
    | TOKEN_TYPE_STRING
    | TOKEN_VALUES
    | TOKEN_INTO
    | TOKEN_INSERT
    | TOKEN_CBRCK
    | TOKEN_OBRCK
    | TOKEN_TABLE
    | TOKEN_DROP
    | TOKEN_CREATE
    | TOKEN_ASC
    | TOKEN_DESC
    | TOKEN_CREATE_TABLE
    | TOKEN_MAX
    | TOKEN_MIN
    | TOKEN_COUNT
    | TOKEN_SUM
    | TOKEN_SELECT
    | TOKEN_FROM
    | TOKEN_WHERE
    | TOKEN_ORDER
    | TOKEN_BY
    | TOKEN_GROUP
    | TOKEN_JOIN
    | TOKEN_INNER
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_ON
    | TOKEN_EQ
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_COMMA
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstartCT
    | NONTERM_startCT
    | NONTERM_StatementType
    | NONTERM_InsertStatement
    | NONTERM_valueList
    | NONTERM_CreateStatement
    | NONTERM_DropStatement
    | NONTERM_columnTypeList
    | NONTERM_columnType
    | NONTERM_SelectStatement
    | NONTERM_columnSelect
    | NONTERM_columnList
    | NONTERM_aggregate
    | NONTERM_joinList
    | NONTERM_joinClause
    | NONTERM_joinOnClause
    | NONTERM_conditionList
    | NONTERM_whereClause
    | NONTERM_op
    | NONTERM_value
    | NONTERM_groupByClause
    | NONTERM_groupByList
    | NONTERM_orderByClause
    | NONTERM_orderByList
    | NONTERM_orderBy

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | STAR  -> 0 
  | QUOT  -> 1 
  | EOF  -> 2 
  | TYPE_INT  -> 3 
  | TYPE_DOUBLE  -> 4 
  | TYPE_STRING  -> 5 
  | VALUES  -> 6 
  | INTO  -> 7 
  | INSERT  -> 8 
  | CBRCK  -> 9 
  | OBRCK  -> 10 
  | TABLE  -> 11 
  | DROP  -> 12 
  | CREATE  -> 13 
  | ASC  -> 14 
  | DESC  -> 15 
  | CREATE_TABLE  -> 16 
  | MAX  -> 17 
  | MIN  -> 18 
  | COUNT  -> 19 
  | SUM  -> 20 
  | SELECT  -> 21 
  | FROM  -> 22 
  | WHERE  -> 23 
  | ORDER  -> 24 
  | BY  -> 25 
  | GROUP  -> 26 
  | JOIN  -> 27 
  | INNER  -> 28 
  | LEFT  -> 29 
  | RIGHT  -> 30 
  | ON  -> 31 
  | EQ  -> 32 
  | LT  -> 33 
  | LE  -> 34 
  | GT  -> 35 
  | GE  -> 36 
  | COMMA  -> 37 
  | AND  -> 38 
  | OR  -> 39 
  | STRING _ -> 40 
  | FLOAT _ -> 41 
  | INT _ -> 42 
  | ID _ -> 43 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_STAR 
  | 1 -> TOKEN_QUOT 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_TYPE_INT 
  | 4 -> TOKEN_TYPE_DOUBLE 
  | 5 -> TOKEN_TYPE_STRING 
  | 6 -> TOKEN_VALUES 
  | 7 -> TOKEN_INTO 
  | 8 -> TOKEN_INSERT 
  | 9 -> TOKEN_CBRCK 
  | 10 -> TOKEN_OBRCK 
  | 11 -> TOKEN_TABLE 
  | 12 -> TOKEN_DROP 
  | 13 -> TOKEN_CREATE 
  | 14 -> TOKEN_ASC 
  | 15 -> TOKEN_DESC 
  | 16 -> TOKEN_CREATE_TABLE 
  | 17 -> TOKEN_MAX 
  | 18 -> TOKEN_MIN 
  | 19 -> TOKEN_COUNT 
  | 20 -> TOKEN_SUM 
  | 21 -> TOKEN_SELECT 
  | 22 -> TOKEN_FROM 
  | 23 -> TOKEN_WHERE 
  | 24 -> TOKEN_ORDER 
  | 25 -> TOKEN_BY 
  | 26 -> TOKEN_GROUP 
  | 27 -> TOKEN_JOIN 
  | 28 -> TOKEN_INNER 
  | 29 -> TOKEN_LEFT 
  | 30 -> TOKEN_RIGHT 
  | 31 -> TOKEN_ON 
  | 32 -> TOKEN_EQ 
  | 33 -> TOKEN_LT 
  | 34 -> TOKEN_LE 
  | 35 -> TOKEN_GT 
  | 36 -> TOKEN_GE 
  | 37 -> TOKEN_COMMA 
  | 38 -> TOKEN_AND 
  | 39 -> TOKEN_OR 
  | 40 -> TOKEN_STRING 
  | 41 -> TOKEN_FLOAT 
  | 42 -> TOKEN_INT 
  | 43 -> TOKEN_ID 
  | 46 -> TOKEN_end_of_input
  | 44 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstartCT 
    | 1 -> NONTERM_startCT 
    | 2 -> NONTERM_StatementType 
    | 3 -> NONTERM_StatementType 
    | 4 -> NONTERM_StatementType 
    | 5 -> NONTERM_StatementType 
    | 6 -> NONTERM_InsertStatement 
    | 7 -> NONTERM_valueList 
    | 8 -> NONTERM_valueList 
    | 9 -> NONTERM_CreateStatement 
    | 10 -> NONTERM_DropStatement 
    | 11 -> NONTERM_columnTypeList 
    | 12 -> NONTERM_columnTypeList 
    | 13 -> NONTERM_columnType 
    | 14 -> NONTERM_columnType 
    | 15 -> NONTERM_columnType 
    | 16 -> NONTERM_SelectStatement 
    | 17 -> NONTERM_columnSelect 
    | 18 -> NONTERM_columnSelect 
    | 19 -> NONTERM_columnList 
    | 20 -> NONTERM_columnList 
    | 21 -> NONTERM_columnList 
    | 22 -> NONTERM_columnList 
    | 23 -> NONTERM_aggregate 
    | 24 -> NONTERM_aggregate 
    | 25 -> NONTERM_aggregate 
    | 26 -> NONTERM_aggregate 
    | 27 -> NONTERM_joinList 
    | 28 -> NONTERM_joinList 
    | 29 -> NONTERM_joinList 
    | 30 -> NONTERM_joinClause 
    | 31 -> NONTERM_joinClause 
    | 32 -> NONTERM_joinClause 
    | 33 -> NONTERM_joinOnClause 
    | 34 -> NONTERM_joinOnClause 
    | 35 -> NONTERM_conditionList 
    | 36 -> NONTERM_conditionList 
    | 37 -> NONTERM_conditionList 
    | 38 -> NONTERM_whereClause 
    | 39 -> NONTERM_whereClause 
    | 40 -> NONTERM_op 
    | 41 -> NONTERM_op 
    | 42 -> NONTERM_op 
    | 43 -> NONTERM_op 
    | 44 -> NONTERM_op 
    | 45 -> NONTERM_value 
    | 46 -> NONTERM_value 
    | 47 -> NONTERM_value 
    | 48 -> NONTERM_value 
    | 49 -> NONTERM_value 
    | 50 -> NONTERM_value 
    | 51 -> NONTERM_groupByClause 
    | 52 -> NONTERM_groupByClause 
    | 53 -> NONTERM_groupByList 
    | 54 -> NONTERM_groupByList 
    | 55 -> NONTERM_orderByClause 
    | 56 -> NONTERM_orderByClause 
    | 57 -> NONTERM_orderByList 
    | 58 -> NONTERM_orderByList 
    | 59 -> NONTERM_orderBy 
    | 60 -> NONTERM_orderBy 
    | 61 -> NONTERM_orderBy 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 46 
let _fsyacc_tagOfErrorTerminal = 44

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | STAR  -> "STAR" 
  | QUOT  -> "QUOT" 
  | EOF  -> "EOF" 
  | TYPE_INT  -> "TYPE_INT" 
  | TYPE_DOUBLE  -> "TYPE_DOUBLE" 
  | TYPE_STRING  -> "TYPE_STRING" 
  | VALUES  -> "VALUES" 
  | INTO  -> "INTO" 
  | INSERT  -> "INSERT" 
  | CBRCK  -> "CBRCK" 
  | OBRCK  -> "OBRCK" 
  | TABLE  -> "TABLE" 
  | DROP  -> "DROP" 
  | CREATE  -> "CREATE" 
  | ASC  -> "ASC" 
  | DESC  -> "DESC" 
  | CREATE_TABLE  -> "CREATE_TABLE" 
  | MAX  -> "MAX" 
  | MIN  -> "MIN" 
  | COUNT  -> "COUNT" 
  | SUM  -> "SUM" 
  | SELECT  -> "SELECT" 
  | FROM  -> "FROM" 
  | WHERE  -> "WHERE" 
  | ORDER  -> "ORDER" 
  | BY  -> "BY" 
  | GROUP  -> "GROUP" 
  | JOIN  -> "JOIN" 
  | INNER  -> "INNER" 
  | LEFT  -> "LEFT" 
  | RIGHT  -> "RIGHT" 
  | ON  -> "ON" 
  | EQ  -> "EQ" 
  | LT  -> "LT" 
  | LE  -> "LE" 
  | GT  -> "GT" 
  | GE  -> "GE" 
  | COMMA  -> "COMMA" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | STRING _ -> "STRING" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | STAR  -> (null : System.Object) 
  | QUOT  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | TYPE_INT  -> (null : System.Object) 
  | TYPE_DOUBLE  -> (null : System.Object) 
  | TYPE_STRING  -> (null : System.Object) 
  | VALUES  -> (null : System.Object) 
  | INTO  -> (null : System.Object) 
  | INSERT  -> (null : System.Object) 
  | CBRCK  -> (null : System.Object) 
  | OBRCK  -> (null : System.Object) 
  | TABLE  -> (null : System.Object) 
  | DROP  -> (null : System.Object) 
  | CREATE  -> (null : System.Object) 
  | ASC  -> (null : System.Object) 
  | DESC  -> (null : System.Object) 
  | CREATE_TABLE  -> (null : System.Object) 
  | MAX  -> (null : System.Object) 
  | MIN  -> (null : System.Object) 
  | COUNT  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | FROM  -> (null : System.Object) 
  | WHERE  -> (null : System.Object) 
  | ORDER  -> (null : System.Object) 
  | BY  -> (null : System.Object) 
  | GROUP  -> (null : System.Object) 
  | JOIN  -> (null : System.Object) 
  | INNER  -> (null : System.Object) 
  | LEFT  -> (null : System.Object) 
  | RIGHT  -> (null : System.Object) 
  | ON  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LE  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GE  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 1us; 65535us; 10us; 11us; 1us; 65535us; 15us; 16us; 1us; 65535us; 4us; 5us; 1us; 65535us; 6us; 7us; 1us; 65535us; 24us; 25us; 2us; 65535us; 24us; 30us; 31us; 32us; 1us; 65535us; 8us; 9us; 1us; 65535us; 8us; 42us; 1us; 65535us; 8us; 51us; 2us; 65535us; 8us; 55us; 53us; 56us; 2us; 65535us; 44us; 45us; 73us; 74us; 2us; 65535us; 44us; 73us; 73us; 73us; 3us; 65535us; 77us; 78us; 81us; 82us; 85us; 86us; 4us; 65535us; 87us; 88us; 92us; 93us; 94us; 95us; 96us; 97us; 1us; 65535us; 45us; 46us; 1us; 65535us; 89us; 90us; 7us; 65535us; 15us; 19us; 20us; 21us; 87us; 89us; 90us; 91us; 92us; 89us; 94us; 89us; 96us; 89us; 1us; 65535us; 46us; 47us; 2us; 65535us; 114us; 115us; 117us; 118us; 1us; 65535us; 47us; 48us; 2us; 65535us; 120us; 121us; 123us; 124us; 2us; 65535us; 120us; 122us; 123us; 122us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 7us; 9us; 11us; 13us; 15us; 18us; 20us; 22us; 24us; 27us; 30us; 33us; 37us; 42us; 44us; 46us; 54us; 56us; 59us; 61us; 64us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 6us; 1us; 6us; 1us; 6us; 2us; 6us; 8us; 1us; 6us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 8us; 1us; 9us; 1us; 9us; 1us; 9us; 2us; 9us; 12us; 1us; 9us; 1us; 9us; 1us; 10us; 1us; 10us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 15us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 3us; 18us; 20us; 22us; 1us; 19us; 2us; 20us; 22us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 26us; 2us; 28us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 34us; 1us; 34us; 3us; 35us; 36us; 37us; 3us; 35us; 36us; 37us; 3us; 35us; 36us; 37us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 41us; 1us; 42us; 1us; 43us; 1us; 44us; 1us; 45us; 1us; 46us; 3us; 47us; 48us; 49us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 52us; 1us; 52us; 1us; 52us; 2us; 53us; 54us; 1us; 54us; 1us; 54us; 1us; 56us; 1us; 56us; 1us; 56us; 2us; 57us; 58us; 1us; 58us; 1us; 58us; 3us; 59us; 60us; 61us; 1us; 60us; 1us; 61us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 32us; 35us; 37us; 39us; 41us; 43us; 45us; 47us; 49us; 51us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 90us; 92us; 94us; 96us; 98us; 100us; 102us; 104us; 108us; 110us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 147us; 149us; 151us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 188us; 192us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 244us; 246us; 249us; 251us; 253us; 255us; 257us; 259us; 262us; 264us; 266us; 270us; 272us; |]
let _fsyacc_action_rows = 128
let _fsyacc_actionTableElements = [|4us; 32768us; 8us; 10us; 12us; 6us; 13us; 4us; 21us; 8us; 0us; 49152us; 1us; 32768us; 2us; 3us; 0us; 16385us; 1us; 32768us; 11us; 22us; 0us; 16386us; 1us; 32768us; 11us; 28us; 0us; 16387us; 6us; 32768us; 0us; 50us; 17us; 57us; 18us; 61us; 19us; 65us; 20us; 69us; 43us; 52us; 0us; 16388us; 1us; 32768us; 7us; 12us; 0us; 16389us; 1us; 32768us; 43us; 13us; 1us; 32768us; 6us; 14us; 1us; 32768us; 10us; 15us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 2us; 32768us; 9us; 17us; 37us; 20us; 1us; 32768us; 2us; 18us; 0us; 16390us; 0us; 16391us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 0us; 16392us; 1us; 32768us; 43us; 23us; 1us; 32768us; 10us; 24us; 3us; 32768us; 3us; 33us; 4us; 35us; 5us; 37us; 2us; 32768us; 9us; 26us; 37us; 31us; 1us; 32768us; 2us; 27us; 0us; 16393us; 1us; 32768us; 43us; 29us; 0us; 16394us; 0us; 16395us; 3us; 32768us; 3us; 33us; 4us; 35us; 5us; 37us; 0us; 16396us; 1us; 32768us; 43us; 34us; 0us; 16397us; 1us; 32768us; 43us; 36us; 0us; 16398us; 1us; 32768us; 10us; 38us; 1us; 32768us; 42us; 39us; 1us; 32768us; 9us; 40us; 1us; 32768us; 43us; 41us; 0us; 16399us; 1us; 32768us; 22us; 43us; 1us; 32768us; 43us; 44us; 3us; 16411us; 28us; 75us; 29us; 79us; 30us; 83us; 1us; 16422us; 23us; 96us; 1us; 16435us; 26us; 113us; 1us; 16439us; 24us; 119us; 1us; 32768us; 2us; 49us; 0us; 16400us; 0us; 16401us; 1us; 16402us; 37us; 53us; 0us; 16403us; 5us; 32768us; 17us; 57us; 18us; 61us; 19us; 65us; 20us; 69us; 43us; 54us; 0us; 16404us; 0us; 16405us; 0us; 16406us; 1us; 32768us; 10us; 58us; 1us; 32768us; 43us; 59us; 1us; 32768us; 9us; 60us; 0us; 16407us; 1us; 32768us; 10us; 62us; 1us; 32768us; 43us; 63us; 1us; 32768us; 9us; 64us; 0us; 16408us; 1us; 32768us; 10us; 66us; 1us; 32768us; 43us; 67us; 1us; 32768us; 9us; 68us; 0us; 16409us; 1us; 32768us; 10us; 70us; 1us; 32768us; 43us; 71us; 1us; 32768us; 9us; 72us; 0us; 16410us; 3us; 16411us; 28us; 75us; 29us; 79us; 30us; 83us; 0us; 16413us; 1us; 32768us; 27us; 76us; 1us; 32768us; 43us; 77us; 1us; 16417us; 31us; 87us; 0us; 16414us; 1us; 32768us; 27us; 80us; 1us; 32768us; 43us; 81us; 1us; 16417us; 31us; 87us; 0us; 16415us; 1us; 32768us; 27us; 84us; 1us; 32768us; 43us; 85us; 1us; 16417us; 31us; 87us; 0us; 16416us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 0us; 16418us; 5us; 32768us; 32us; 98us; 33us; 99us; 34us; 100us; 35us; 101us; 36us; 102us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 2us; 16419us; 38us; 92us; 39us; 94us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 0us; 16420us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 0us; 16421us; 4us; 32768us; 1us; 105us; 41us; 104us; 42us; 103us; 43us; 112us; 0us; 16423us; 0us; 16424us; 0us; 16425us; 0us; 16426us; 0us; 16427us; 0us; 16428us; 0us; 16429us; 0us; 16430us; 3us; 32768us; 41us; 108us; 42us; 110us; 43us; 106us; 1us; 32768us; 1us; 107us; 0us; 16431us; 1us; 32768us; 1us; 109us; 0us; 16432us; 1us; 32768us; 1us; 111us; 0us; 16433us; 0us; 16434us; 1us; 32768us; 25us; 114us; 1us; 32768us; 43us; 116us; 0us; 16436us; 1us; 16437us; 37us; 117us; 1us; 32768us; 43us; 116us; 0us; 16438us; 1us; 32768us; 25us; 120us; 1us; 32768us; 43us; 125us; 0us; 16440us; 1us; 16441us; 37us; 123us; 1us; 32768us; 43us; 125us; 0us; 16442us; 2us; 16443us; 14us; 126us; 15us; 127us; 0us; 16444us; 0us; 16445us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 8us; 9us; 11us; 12us; 14us; 15us; 22us; 23us; 25us; 26us; 28us; 30us; 32us; 37us; 40us; 42us; 43us; 44us; 49us; 50us; 52us; 54us; 58us; 61us; 63us; 64us; 66us; 67us; 68us; 72us; 73us; 75us; 76us; 78us; 79us; 81us; 83us; 85us; 87us; 88us; 90us; 92us; 96us; 98us; 100us; 102us; 104us; 105us; 106us; 108us; 109us; 115us; 116us; 117us; 118us; 120us; 122us; 124us; 125us; 127us; 129us; 131us; 132us; 134us; 136us; 138us; 139us; 141us; 143us; 145us; 146us; 150us; 151us; 153us; 155us; 157us; 158us; 160us; 162us; 164us; 165us; 167us; 169us; 171us; 172us; 177us; 178us; 184us; 189us; 192us; 197us; 198us; 203us; 204us; 209us; 210us; 211us; 212us; 213us; 214us; 215us; 216us; 217us; 221us; 223us; 224us; 226us; 227us; 229us; 230us; 231us; 233us; 235us; 236us; 238us; 240us; 241us; 243us; 245us; 246us; 248us; 250us; 251us; 254us; 255us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 2us; 2us; 2us; 7us; 1us; 3us; 6us; 2us; 1us; 3us; 2us; 2us; 5us; 8us; 1us; 1us; 1us; 3us; 1us; 3us; 4us; 4us; 4us; 4us; 0us; 1us; 2us; 4us; 4us; 4us; 0us; 2us; 3us; 5us; 5us; 0us; 2us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 3us; 3us; 3us; 1us; 0us; 3us; 1us; 3us; 0us; 3us; 1us; 3us; 1us; 2us; 2us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 3us; 4us; 4us; 5us; 6us; 7us; 7us; 8us; 8us; 8us; 9us; 10us; 10us; 11us; 11us; 11us; 11us; 12us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 14us; 14us; 15us; 15us; 16us; 16us; 16us; 17us; 17us; 18us; 18us; 18us; 18us; 18us; 19us; 19us; 19us; 19us; 19us; 19us; 20us; 20us; 21us; 21us; 22us; 22us; 23us; 23us; 24us; 24us; 24us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 16387us; 65535us; 16388us; 65535us; 16389us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16390us; 16391us; 65535us; 16392us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 16394us; 16395us; 65535us; 16396us; 65535us; 16397us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 16399us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 16401us; 65535us; 16403us; 65535us; 16404us; 16405us; 16406us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 16410us; 65535us; 16413us; 65535us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 65535us; 16416us; 65535us; 16418us; 65535us; 65535us; 65535us; 65535us; 16420us; 65535us; 16421us; 65535us; 16423us; 16424us; 16425us; 16426us; 16427us; 16428us; 16429us; 16430us; 65535us; 65535us; 16431us; 65535us; 16432us; 65535us; 16433us; 16434us; 65535us; 65535us; 16436us; 65535us; 65535us; 16438us; 65535us; 65535us; 16440us; 65535us; 65535us; 16442us; 65535us; 16444us; 16445us; |]
let _fsyacc_reductions ()  =    [| 
# 408 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Sql.DmlDdlSqlStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstartCT));
# 417 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'StatementType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "SqlParser.fsp"
                           _1 
                   )
# 37 "SqlParser.fsp"
                 : Sql.DmlDdlSqlStatement));
# 428 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'CreateStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "SqlParser.fsp"
                                                    Create(_2) 
                   )
# 40 "SqlParser.fsp"
                 : 'StatementType));
# 439 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'DropStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 41 "SqlParser.fsp"
                                                Drop(_2) 
                   )
# 41 "SqlParser.fsp"
                 : 'StatementType));
# 450 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'SelectStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "SqlParser.fsp"
                                                    Select(_2) 
                   )
# 42 "SqlParser.fsp"
                 : 'StatementType));
# 461 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'InsertStatement)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "SqlParser.fsp"
                                                    Insert(_2)
                   )
# 43 "SqlParser.fsp"
                 : 'StatementType));
# 472 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "SqlParser.fsp"
                               
                             { 
                                 Table = _2;
                                 Values = List.rev _5;
                             }
                         
                   )
# 47 "SqlParser.fsp"
                 : 'InsertStatement));
# 489 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "SqlParser.fsp"
                                   [_1]
                   )
# 55 "SqlParser.fsp"
                 : 'valueList));
# 500 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'valueList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "SqlParser.fsp"
                                                   _3 :: _1 
                   )
# 56 "SqlParser.fsp"
                 : 'valueList));
# 512 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnTypeList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "SqlParser.fsp"
                              
                             {
                                 Table = _2;
                                 ColumnList = List.rev _4
                             } 
                         
                   )
# 60 "SqlParser.fsp"
                 : 'CreateStatement));
# 529 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "SqlParser.fsp"
                                      _2 
                   )
# 68 "SqlParser.fsp"
                 : 'DropStatement));
# 540 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "SqlParser.fsp"
                                                           [_1] 
                   )
# 71 "SqlParser.fsp"
                 : 'columnTypeList));
# 551 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnTypeList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnType)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "SqlParser.fsp"
                                                             _3 :: _1 
                   )
# 72 "SqlParser.fsp"
                 : 'columnTypeList));
# 563 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "SqlParser.fsp"
                                         IntCType, 0, _2 
                   )
# 75 "SqlParser.fsp"
                 : 'columnType));
# 574 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "SqlParser.fsp"
                                            DoubleCType, 0, _2 
                   )
# 76 "SqlParser.fsp"
                 : 'columnType));
# 585 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "SqlParser.fsp"
                                                            StringCType, _3, _5 
                   )
# 77 "SqlParser.fsp"
                 : 'columnType));
# 597 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnSelect)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinList)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'whereClause)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : 'groupByClause)) in
            let _7 = (let data = parseState.GetInput(7) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "SqlParser.fsp"
                                                  
                                                     { Table = _3;
                                                       Columns = _1;
                                                       Joins = _4;
                                                       Where = _5;
                                                       GroupBy = _6;
                                                       OrderBy = _7 }
                                                 
                   )
# 86 "SqlParser.fsp"
                 : 'SelectStatement));
# 620 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "SqlParser.fsp"
                                  Star 
                   )
# 96 "SqlParser.fsp"
                 : 'columnSelect));
# 630 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 97 "SqlParser.fsp"
                                        ColumnList(List.rev _1) 
                   )
# 97 "SqlParser.fsp"
                 : 'columnSelect));
# 641 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 100 "SqlParser.fsp"
                                                       [Projection(_1)] 
                   )
# 100 "SqlParser.fsp"
                 : 'columnList));
# 652 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "SqlParser.fsp"
                                                       Projection(_3) :: _1 
                   )
# 101 "SqlParser.fsp"
                 : 'columnList));
# 664 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "SqlParser.fsp"
                                              [_1] 
                   )
# 102 "SqlParser.fsp"
                 : 'columnList));
# 675 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'columnList)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'aggregate)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 103 "SqlParser.fsp"
                                                        _3 :: _1 
                   )
# 103 "SqlParser.fsp"
                 : 'columnList));
# 687 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "SqlParser.fsp"
                                                Aggregate(Max, _3) 
                   )
# 106 "SqlParser.fsp"
                 : 'aggregate));
# 698 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 107 "SqlParser.fsp"
                                                Aggregate(Min, _3) 
                   )
# 107 "SqlParser.fsp"
                 : 'aggregate));
# 709 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "SqlParser.fsp"
                                                  Aggregate(Count, _3) 
                   )
# 108 "SqlParser.fsp"
                 : 'aggregate));
# 720 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "SqlParser.fsp"
                                                Aggregate(Sum, _3) 
                   )
# 109 "SqlParser.fsp"
                 : 'aggregate));
# 731 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "SqlParser.fsp"
                                                           [] 
                   )
# 113 "SqlParser.fsp"
                 : 'joinList));
# 741 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "SqlParser.fsp"
                                                           [_1] 
                   )
# 114 "SqlParser.fsp"
                 : 'joinList));
# 752 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinClause)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "SqlParser.fsp"
                                                           _1 :: _2 
                   )
# 115 "SqlParser.fsp"
                 : 'joinList));
# 764 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "SqlParser.fsp"
                                                           _3, Inner, _4 
                   )
# 118 "SqlParser.fsp"
                 : 'joinClause));
# 776 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 119 "SqlParser.fsp"
                                                           _3, Left, _4 
                   )
# 119 "SqlParser.fsp"
                 : 'joinClause));
# 788 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : 'joinOnClause)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "SqlParser.fsp"
                                                           _3, Right, _4 
                   )
# 120 "SqlParser.fsp"
                 : 'joinClause));
# 800 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "SqlParser.fsp"
                                                           None 
                   )
# 123 "SqlParser.fsp"
                 : 'joinOnClause));
# 810 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "SqlParser.fsp"
                                                           Some(_2) 
                   )
# 124 "SqlParser.fsp"
                 : 'joinOnClause));
# 821 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "SqlParser.fsp"
                                                               Cond(_1, _2, _3) 
                   )
# 127 "SqlParser.fsp"
                 : 'conditionList));
# 834 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 128 "SqlParser.fsp"
                                                               And(Cond(_1, _2, _3), _5) 
                   )
# 128 "SqlParser.fsp"
                 : 'conditionList));
# 848 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'op)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'value)) in
            let _5 = (let data = parseState.GetInput(5) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 129 "SqlParser.fsp"
                                                               Or(Cond(_1, _2, _3), _5) 
                   )
# 129 "SqlParser.fsp"
                 : 'conditionList));
# 862 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 133 "SqlParser.fsp"
                                                           None 
                   )
# 133 "SqlParser.fsp"
                 : 'whereClause));
# 872 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'conditionList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "SqlParser.fsp"
                                                           Some(_2) 
                   )
# 134 "SqlParser.fsp"
                 : 'whereClause));
# 883 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                              Eq 
                   )
# 136 "SqlParser.fsp"
                 : 'op));
# 893 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                                          Lt 
                   )
# 136 "SqlParser.fsp"
                 : 'op));
# 903 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                                                      Le 
                   )
# 136 "SqlParser.fsp"
                 : 'op));
# 913 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                                                                  Gt 
                   )
# 136 "SqlParser.fsp"
                 : 'op));
# 923 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 136 "SqlParser.fsp"
                                                                              Ge 
                   )
# 136 "SqlParser.fsp"
                 : 'op));
# 933 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 139 "SqlParser.fsp"
                                                   Int(_1) 
                   )
# 139 "SqlParser.fsp"
                 : 'value));
# 944 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "SqlParser.fsp"
                                                   Float(_1) 
                   )
# 140 "SqlParser.fsp"
                 : 'value));
# 955 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 141 "SqlParser.fsp"
                                                   String(_2) 
                   )
# 141 "SqlParser.fsp"
                 : 'value));
# 966 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 142 "SqlParser.fsp"
                                                      String(string _2) 
                   )
# 142 "SqlParser.fsp"
                 : 'value));
# 977 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "SqlParser.fsp"
                                                    String(string _2) 
                   )
# 143 "SqlParser.fsp"
                 : 'value));
# 988 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "SqlParser.fsp"
                                                   Id(_1) 
                   )
# 144 "SqlParser.fsp"
                 : 'value));
# 999 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "SqlParser.fsp"
                                                           [] 
                   )
# 148 "SqlParser.fsp"
                 : 'groupByClause));
# 1009 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'groupByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 149 "SqlParser.fsp"
                                                           _3 
                   )
# 149 "SqlParser.fsp"
                 : 'groupByClause));
# 1020 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "SqlParser.fsp"
                                                           [_1] 
                   )
# 152 "SqlParser.fsp"
                 : 'groupByList));
# 1031 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'groupByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "SqlParser.fsp"
                                                           _1 :: _3 
                   )
# 153 "SqlParser.fsp"
                 : 'groupByList));
# 1043 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "SqlParser.fsp"
                                                           [] 
                   )
# 157 "SqlParser.fsp"
                 : 'orderByClause));
# 1053 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "SqlParser.fsp"
                                                           _3 
                   )
# 158 "SqlParser.fsp"
                 : 'orderByClause));
# 1064 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderBy)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 161 "SqlParser.fsp"
                                                           [_1] 
                   )
# 161 "SqlParser.fsp"
                 : 'orderByList));
# 1075 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderBy)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : 'orderByList)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 162 "SqlParser.fsp"
                                                           _1 :: _3 
                   )
# 162 "SqlParser.fsp"
                 : 'orderByList));
# 1087 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "SqlParser.fsp"
                                                           _1, Asc 
                   )
# 165 "SqlParser.fsp"
                 : 'orderBy));
# 1098 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 166 "SqlParser.fsp"
                                                           _1, Asc 
                   )
# 166 "SqlParser.fsp"
                 : 'orderBy));
# 1109 "SqlParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 167 "SqlParser.fsp"
                                                           _1, Desc
                   )
# 167 "SqlParser.fsp"
                 : 'orderBy));
|]
# 1121 "SqlParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 47;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let startCT lexer lexbuf : Sql.DmlDdlSqlStatement =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
